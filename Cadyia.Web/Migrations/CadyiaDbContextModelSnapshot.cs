// <auto-generated />
using System;
using Cadyia.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cadyia.Web.Migrations
{
    [DbContext(typeof(CadyiaDbContext))]
    partial class CadyiaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cadyia.Data.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<int?>("AcademicDegreeId");

                    b.Property<string>("Biography");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("EnAliasName");

                    b.Property<int?>("FieldStudyId");

                    b.Property<string>("FirstName");

                    b.Property<bool?>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("LocalAliasName");

                    b.Property<string>("Location");

                    b.Property<int>("ProfileView");

                    b.HasKey("UserId");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("FieldStudyId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.AcademicDegree", b =>
                {
                    b.Property<int>("AcademicDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademicDegreeTitle");

                    b.HasKey("AcademicDegreeId");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.AcademicDegreeGlobal", b =>
                {
                    b.Property<int>("AcademicDegreeId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Title");

                    b.HasKey("AcademicDegreeId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AcademicDegreeGlobals");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactTitle");

                    b.Property<bool>("Status");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.FieldStudy", b =>
                {
                    b.Property<int>("FieldStudyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FieldStudyId1");

                    b.Property<string>("FieldStudyTitle");

                    b.Property<int?>("ParentFieldStudyId");

                    b.HasKey("FieldStudyId");

                    b.HasIndex("FieldStudyId1");

                    b.ToTable("FieldStudies");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.FieldStudyGlobal", b =>
                {
                    b.Property<int>("FieldStudyId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Title");

                    b.HasKey("FieldStudyId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("FieldStudyGlobals");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageCode");

                    b.Property<string>("LanguageName");

                    b.Property<bool>("Status");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Approve");

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<int?>("ApprovedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("Free")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int?>("ImageId");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<bool>("PresentOnly");

                    b.Property<string>("RejectCause");

                    b.Property<bool>("Show");

                    b.Property<DateTime?>("ShowDate");

                    b.Property<DateTime>("SubmitDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Title");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<int>("View")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.HasKey("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.PlanDownload", b =>
                {
                    b.Property<int>("PlanId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.HasKey("PlanId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanDownloads");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.PlanGlobal", b =>
                {
                    b.Property<int>("PlanId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("PlanId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("PlanGlobal");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.PlanLike", b =>
                {
                    b.Property<int>("PlanId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.HasKey("PlanId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanLikes");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.PlanView", b =>
                {
                    b.Property<int>("PlanId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.HasKey("PlanId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PlanViews");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.UserContact", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<string>("ContactValue");

                    b.Property<bool>("IsVerify");

                    b.Property<string>("VerifyCode");

                    b.HasKey("ContactId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");


                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Cadyia.Data.Entities.UserProfile", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.AcademicDegree", "AcademicDegree")
                        .WithMany()
                        .HasForeignKey("AcademicDegreeId");

                    b.HasOne("Cadyia.Web.Data.Entities.FieldStudy", "FieldStudy")
                        .WithMany()
                        .HasForeignKey("FieldStudyId");

                    b.HasOne("Cadyia.Web.Data.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Cadyia.Data.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.AcademicDegreeGlobal", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.AcademicDegree", "AcademicDegree")
                        .WithMany("AcademicDegreeGlobals")
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cadyia.Web.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.FieldStudy", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.FieldStudy")
                        .WithMany("FieldStudies")
                        .HasForeignKey("FieldStudyId1");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.FieldStudyGlobal", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.FieldStudy", "FieldStudy")
                        .WithMany("FieldStudyGlobals")
                        .HasForeignKey("FieldStudyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cadyia.Web.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.Plan", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.User", "User")
                        .WithMany("Plans")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.PlanDownload", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.Plan", "Plan")
                        .WithMany("PlanDownloads")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cadyia.Web.Data.Entities.User", "User")
                        .WithMany("PlanDownloads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.PlanGlobal", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cadyia.Web.Data.Entities.Plan", "Plan")
                        .WithMany("PlanGlobals")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.PlanLike", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.Plan", "Plan")
                        .WithMany("PlanLikes")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cadyia.Web.Data.Entities.User", "User")
                        .WithMany("PlanLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.PlanView", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.Plan", "Plan")
                        .WithMany("PlanViews")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cadyia.Web.Data.Entities.User", "User")
                        .WithMany("PlanViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cadyia.Web.Data.Entities.UserContact", b =>
                {
                    b.HasOne("Cadyia.Web.Data.Entities.Contact", "Contact")
                        .WithMany("UserContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cadyia.Web.Data.Entities.User", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
